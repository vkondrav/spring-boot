services:
  # Auth
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:26.0.2
    ports:
      - "7080:8080"
      - "7081:9000"
    environment:

      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloakdb:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password

      KC_LOG_LEVEL: info
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin

    command: start-dev
    healthcheck:
      test: [
        "CMD-SHELL",
        'exec 3<>/dev/tcp/localhost/9000; echo -e "GET /health/ready HTTP/1.1\nhost: localhost:9000\n" >&3; timeout --preserve-status 1 cat <&3 | grep -m 1 status | grep -m 1 UP; ERROR=$?; exec 3<&-; exec 3>&-; exit $ERROR'
      ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend
    depends_on:
      keycloakdb:
        condition: service_healthy

  # Observability and Monitoring Services

  read:
    image: grafana/loki:3.1.0
    container_name: loki_read
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - "3101:3100"
      - "7946"
      - "9095"
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      backend:
        aliases:
          - loki

  write:
    image: grafana/loki:3.1.0
    container_name: loki_write
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - "3102:3100"
      - "7946"
      - "9095"
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  gateway:
    image: nginx:latest
    container_name: loki_gateway
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  backend:
    image: grafana/loki:3.1.0
    container_name: loki_backend
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    networks:
      - backend

  alloy:
    image: grafana/alloy:latest
    container_name: alloy
    volumes:
      - ../observability/alloy/alloy-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - "12345:12345"
    depends_on:
      - gateway
    networks:
      - backend

  prometheus:
    image: prom/prometheus:v2.50.1
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - backend

  tempo:
    image: grafana/tempo:2.6.1
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110:3100"
      - "4317:4317"
    volumes:
      - ../observability/tempo/tempo.yml:/etc/tempo-config.yml
    networks:
      - backend

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ../observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  redis-insight:
    image: redis/redisinsight
    container_name: redis_insight
    ports:
      - "5540:5540"
    networks:
      - backend
    volumes:
      - redisinsight_data:/data
  #end Observability and Monitoring Services

  # Data Stores
  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      timeout: 10s
      retries: 10

  keycloakdb:
    container_name: keycloakdb
    image: postgres:17
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    healthcheck:
      test: "pg_isready -U keycloak"
    networks:
      - backend
    volumes:
      - keycloak_data:/var/lib/postgresql/data

  minio:
    image: minio/minio
    container_name: minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      MINIO_ROOT_USER: loki
      MINIO_ROOT_PASSWORD: supersecret
      MINIO_PROMETHEUS_AUTH_TYPE: public
      MINIO_UPDATE: off
    ports:
      - "9000"
    volumes:
      - minio_data:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - backend

  accountsdb:
    image: mysql:8.0
    container_name: accountsdb
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: accountsdb
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_TCP_PORT: 3306
    ports:
      - "3306:3306"
    networks:
      - backend
    healthcheck:
      test: "mysqladmin ping -h localhost"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s
    volumes:
      - accountsdb_data:/var/lib/mysql

  cardsdb:
    image: mysql:8.0
    container_name: cardsdb
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: cardsdb
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_TCP_PORT: 3307
    ports:
      - "3307:3306"
    networks:
      - backend
    healthcheck:
      test: "mysqladmin ping -h localhost"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s
    volumes:
      - cardsdb_data:/var/lib/mysql

  loansdb:
    image: mysql:8.0
    container_name: loansdb
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: loansdb
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_TCP_PORT: 3308
    ports:
      - "3308:3306"
    networks:
      - backend
    healthcheck:
      test: "mysqladmin ping -h localhost"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s
    volumes:
      - loansdb_data:/var/lib/mysql

  #end Data Stores

  # Communication Services
  rabbitmq:
    image: rabbitmq:4.0-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - backend
    healthcheck:
      test: "rabbitmq-diagnostics check_port_connectivity"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s

  hookdeck:
    image: hookdeck/hookdeck-cli
    container_name: hookdeck
    networks:
      - backend
    entrypoint: [ "/bin/sh","-c" ]
    command:
      - |
        bin/hookdeck login
        bin/hookdeck listen http://host.docker.internal:8071 github-spring
    depends_on:
      - config
    volumes:
      - ~/.config/hookdeck:/root/.config/hookdeck
  #end Communication Services

  # Application Services
  config:
    image: vkondrav/config:v1
    container_name: config_service
    ports:
      - "8071:8071"
    healthcheck:
      test: "curl --fail --silent http://localhost:8071/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - backend
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      SPRING_RABBITMQ_HOST: "rabbitmq"
      JAVA_TOOL_OPTIONS: "-javaagent:/app/libs/opentelemetry-javaagent-2.9.0.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4317
      OTEL_METRICS_EXPORTER: none
      OTEL_SERVICE_NAME: "config"

  eureka:
    image: vkondrav/eureka:v1
    container_name: eureka_service
    ports:
      - "8070:8070"
    healthcheck:
      test: "curl --fail --silent http://localhost:8070/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - backend
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://config:8071/"
      SPRING_PROFILES_ACTIVE: "default"
      SPRING_APPLICATION_NAME: "eureka"
      SPRING_RABBITMQ_HOST: "rabbitmq"
      JAVA_TOOL_OPTIONS: "-javaagent:/app/libs/opentelemetry-javaagent-2.9.0.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4317
      OTEL_METRICS_EXPORTER: none
      OTEL_SERVICE_NAME: "eureka"
    depends_on:
      config:
        condition: service_healthy

  edge:
    image: vkondrav/edge:v1
    container_name: edge_service
    ports:
      - "8072:8072"
    healthcheck:
      test: "curl --fail --silent http://localhost:8072/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - backend
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://config:8071/"
      SPRING_PROFILES_ACTIVE: "default"
      SPRING_APPLICATION_NAME: "edge"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eureka:8070/eureka/"
      SPRING_DATA_REDIS_CONNECT-TIMEOUT: 2s
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_TIMEOUT: 1s
      JAVA_TOOL_OPTIONS: "-javaagent:/app/libs/opentelemetry-javaagent-2.9.0.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4317
      OTEL_METRICS_EXPORTER: none
      OTEL_SERVICE_NAME: "edge"
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: "http://keycloak:8080/realms/master/protocol/openid-connect/certs"
    depends_on:
      keycloak:
        condition: service_healthy
      redis:
        condition: service_healthy
      eureka:
        condition: service_healthy

  accounts:
    image: vkondrav/accounts:v1
    container_name: accounts_service
    ports:
      - "8081:8081"
    healthcheck:
      test: "curl --fail --silent http://localhost:8081/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - backend
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://config:8071/"
      SPRING_PROFILES_ACTIVE: "default"
      SPRING_APPLICATION_NAME: "accounts"
      SPRING_RABBITMQ_HOST: "rabbitmq"
      SPRING_DATASOURCE_URL: "jdbc:mysql://accountsdb:3306/accountsdb"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eureka:8070/eureka/"
      JAVA_TOOL_OPTIONS: "-javaagent:/app/libs/opentelemetry-javaagent-2.9.0.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4317
      OTEL_METRICS_EXPORTER: none
      OTEL_SERVICE_NAME: "accounts"
    depends_on:
      accountsdb:
        condition: service_healthy
      edge:
        condition: service_healthy

  cards:
    image: vkondrav/cards:v1
    container_name: cards_service
    ports:
      - "9000:9000"
    healthcheck:
      test: "curl --fail --silent http://localhost:9000/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - backend
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://config:8071/"
      SPRING_PROFILES_ACTIVE: "default"
      SPRING_APPLICATION_NAME: "cards"
      SPRING_RABBITMQ_HOST: "rabbitmq"
      SPRING_DATASOURCE_URL: "jdbc:mysql://cardsdb:3307/cardsdb"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eureka:8070/eureka/"
      JAVA_TOOL_OPTIONS: "-javaagent:/app/libs/opentelemetry-javaagent-2.9.0.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4317
      OTEL_METRICS_EXPORTER: none
      OTEL_SERVICE_NAME: "cards"
    depends_on:
      cardsdb:
        condition: service_healthy
      edge:
        condition: service_healthy

  loans:
    image: vkondrav/loans:v1
    container_name: loans_service
    ports:
      - "8090:8090"
    healthcheck:
      test: "curl --fail --silent http://localhost:8090/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - backend
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://config:8071/"
      SPRING_PROFILES_ACTIVE: "default"
      SPRING_APPLICATION_NAME: "loans"
      SPRING_RABBITMQ_HOST: "rabbitmq"
      SPRING_DATASOURCE_URL: "jdbc:mysql://loansdb:3308/loansdb"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eureka:8070/eureka/"
      JAVA_TOOL_OPTIONS: "-javaagent:/app/libs/opentelemetry-javaagent-2.9.0.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4317
      OTEL_METRICS_EXPORTER: none
      OTEL_SERVICE_NAME: "loans"
    depends_on:
      loansdb:
        condition: service_healthy
      edge:
        condition: service_healthy

  messages:
    image: "vkondrav/messages:v1"
    container_name: messages
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - backend
    environment:
      SPRING_RABBITMQ_HOST: "rabbitmq"
  #end Application Services

networks:
  backend:
    driver: "bridge"

volumes:
  accountsdb_data:
  cardsdb_data:
  loansdb_data:
  redisinsight_data:
  minio_data:
  grafana_data:
  keycloak_data: